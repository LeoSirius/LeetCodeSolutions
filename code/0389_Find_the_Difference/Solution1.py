from collections import defaultdict

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        mp = defaultdict(int)
        
        for i in range(len(s)):
            mp[s[i]] += 1
            mp[t[i]] -= 1
        mp[t[-1]] -= 1

        for k, v in mp.items():
            if v == -1:
                return k



def test(test_name, s, t, expected):
    res = Solution().findTheDifference(s, t)
    print(f'res = {res}')
    if res == expected:
        print(test_name + ' success.')
    else:
        print(test_name + ' failed.')


if __name__ == "__main__":
    s1 = 'abcd'
    t1 = 'abcde'
    expected1 = 'e'
    test('test1', s1, t1, expected1)

    s2 = ''
    t2 = 'y'
    expected2 = 'y'
    test('test2', s2, t2, expected2)

    s3 = 'a'
    t3 = 'aa'
    expected3 = 'a'
    test('test3', s3, t3, expected3)

    s4 = 'ae'
    t4 = 'aea'
    expected4 = 'a'
    test('test4', s4, t4, expected4)


# You are given two strings s and t.

# String t is generated by random shuffling string s and 
# then add one more letter at a random position.

# Return the letter that was added to t.


# Example 1:

# Input: s = "abcd", t = "abcde"
# Output: "e"
# Explanation: 'e' is the letter that was added.

# Example 2:

# Input: s = "", t = "y"
# Output: "y"

# Example 3:

# Input: s = "a", t = "aa"
# Output: "a"

# Example 4:

# Input: s = "ae", t = "aea"
# Output: "a"
# Â 

# Constraints:

# 0 <= s.length <= 1000
# t.length == s.length + 1
# s and t consist of lower-case English letters.

